name: Build and Deploy Remotes

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect changed remotes
        id: detect
        shell: bash
        run: |
          base="${{ github.event.before }}"
          if [ -z "$base" ]; then
            base=$(git rev-parse HEAD^)
          fi
          dirs=$(git diff --name-only "$base" "$GITHUB_SHA" -- remotes | awk -F/ '/^remotes\/[^\/]+\//{print $2}' | sort -u | xargs)
          echo "REMOTE_NAMES=$dirs" >> $GITHUB_ENV

      - name: Exit if no remote changes
        if: env.REMOTE_NAMES == ''
        run: echo 'No remote changes detected.'

      - name: Setup Node.js
        if: env.REMOTE_NAMES != ''
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: Clean install from registry
        run: |
          rm -rf node_modules package-lock.json ui-kit
          npm install --force

      - name: Build changed remotes
        if: env.REMOTE_NAMES != ''
        run: |
          REMOTE_NAMES="$REMOTE_NAMES" npm run build:all

      - name: Azure Login
        if: env.REMOTE_NAMES != ''
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure $web container exists
        if: env.REMOTE_NAMES != ''
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage container create --account-name uiremotes -n '$web' --auth-mode login

      - name: Upload remotes to Azure Storage
        if: env.REMOTE_NAMES != ''
        uses: azure/CLI@v1
        with:
          inlineScript: |
            tmpfile=$(mktemp)
            for remote in $REMOTE_NAMES; do
              lower=$(echo "$remote" | tr '[:upper:]' '[:lower:]')
              remote_cap=${remote^}
              version=$(grep -oP '"version":\s*"\K[^" ]+' "remotes/${lower}/package.json")
              src="dist/${remote_cap}/${version}"
              mkdir -p "$src"
              az storage blob upload --account-name uiremotes --container-name '$web' --file "$tmpfile" --name "remotes/${lower}/${version}/.init" --overwrite --auth-mode login
              az storage blob upload --account-name uiremotes --container-name '$web' --file "$tmpfile" --name "remotes/${lower}/latest/.init" --overwrite --auth-mode login
              az storage blob upload-batch --account-name uiremotes -s "$src" -d '$web' --destination-path "remotes/${lower}/${version}" --overwrite --auth-mode login
              az storage blob upload-batch --account-name uiremotes -s "$src" -d '$web' --destination-path "remotes/${lower}/latest" --overwrite --auth-mode login
            done
            rm "$tmpfile"
